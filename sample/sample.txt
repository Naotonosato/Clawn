~ROOT~Block:{
}:[GLOBAL]/Various#0<(unsolved)->union @result_of_function_[GLOBAL]/Various#0{:Integer}>

Block:{
}:unsolved

Block:{
}:unsolved

[GLOBAL]/get_unique_number:@get_unique_number<()->CType7> = function:get_unique_numberget_unique_number<()->CType7>{
Block:{
}:CType7

}
[GLOBAL]/use_heap:@use_heap<(CType7)->reference<CType7>> = function:use_heapuse_heap<(CType7)->reference<CType7>>{
Block:{
}:reference<CType7>

}
[GLOBAL]/register_calling_id:@register_calling_id<()->Void> = function:register_calling_idregister_calling_id<()->Void>{
Block:{
}:Void

}
[GLOBAL]/register_calling_id_to_free:@register_calling_id_to_free<(CType7)->Void> = function:register_calling_id_to_freeregister_calling_id_to_free<(CType7)->Void>{
Block:{
}:Void

}
[GLOBAL]/free_heaps_associated_calling_id:@free_heaps_associated_calling_id<(CType7)->Void> = function:free_heaps_associated_calling_idfree_heaps_associated_calling_id<(CType7)->Void>{
Block:{
}:Void

}
[GLOBAL]/free_heaps:@free_heaps<(CType7)->Void> = function:free_heapsfree_heaps<(CType7)->Void>{
Block:{
}:Void

}
[GLOBAL]/malloc:@malloc<(CType12)->reference<CType4>> = function:mallocmalloc<(CType12)->reference<CType4>>{
Block:{
}:reference<CType4>

}
[GLOBAL]/memcpy:@memcpy<(reference<CType4>, reference<CType4>, CType12)->reference<CType4>> = function:memcpymemcpy<(reference<CType4>, reference<CType4>, CType12)->reference<CType4>>{
Block:{
}:reference<CType4>

}
[GLOBAL]/exit:@exit<(CType4)->Void> = function:exitexit<(CType4)->Void>{
Block:{
}:Void

}
[GLOBAL]/printf:@printf<(reference<CType1>)->CType4> = function:printfprintf<(reference<CType1>)->CType4>{
Block:{
}:CType4

}
[GLOBAL]/snprintf:@snprintf<(reference<CType1>, CType12, reference<CType1>)->CType4> = function:snprintfsnprintf<(reference<CType1>, CType12, reference<CType1>)->CType4>{
Block:{
}:CType4

}
[GLOBAL]/realloc:@realloc<(reference<CType4>, CType12)->reference<CType4>> = function:reallocrealloc<(reference<CType4>, CType12)->reference<CType4>>{
Block:{
}:reference<CType4>

}
[GLOBAL]/puts:@puts<(reference<CType1>)->CType4> = function:putsputs<(reference<CType1>)->CType4>{
Block:{
}:CType4

}
[GLOBAL]/strcat:@strcat<(reference<CType1>, reference<CType1>)->reference<CType1>> = function:strcatstrcat<(reference<CType1>, reference<CType1>)->reference<CType1>>{
Block:{
}:reference<CType1>

}
[GLOBAL]/strcmp:@strcmp<(reference<CType1>, reference<CType1>)->CType4> = function:strcmpstrcmp<(reference<CType1>, reference<CType1>)->CType4>{
Block:{
}:CType4

}
[GLOBAL]/blawn_realloc:@blawn_realloc<(reference<CType4>, CType7, CType7)->reference<CType4>> = function:blawn_reallocblawn_realloc<(reference<CType4>, CType7, CType7)->reference<CType4>>{
Block:{
}:reference<CType4>

}
[GLOBAL]/blawn_memcpy:@blawn_memcpy<(reference<CType4>, CType7, CType7, reference<CType4>)->Void> = function:blawn_memcpyblawn_memcpy<(reference<CType4>, CType7, CType7, reference<CType4>)->Void>{
Block:{
}:Void

}
[GLOBAL]/blawn_index:@blawn_index<(reference<CType4>, CType7, CType7, CType7)->reference<CType4>> = function:blawn_indexblawn_index<(reference<CType4>, CType7, CType7, CType7)->reference<CType4>>{
Block:{
}:reference<CType4>

}
[GLOBAL]/blawn_set_element:@blawn_set_element<(reference<CType4>, CType7, CType7, reference<CType4>, CType7)->Void> = function:blawn_set_elementblawn_set_element<(reference<CType4>, CType7, CType7, reference<CType4>, CType7)->Void>{
Block:{
}:Void

}
[GLOBAL]/list_constructor:@list_constructor<(CType7)->reference<_List>> = function:list_constructorlist_constructor<(CType7)->reference<_List>>{
Block:{
}:reference<_List>

}
[GLOBAL]/append:@append<(reference<_List>, reference<CType4>)->Void> = function:appendappend<(reference<_List>, reference<CType4>)->Void>{
Block:{
}:Void

}
[GLOBAL]/get:@get<(reference<_List>, CType7)->reference<CType4>> = function:getget<(reference<_List>, CType7)->reference<CType4>>{
Block:{
}:reference<CType4>

}
[GLOBAL]/print:@print<(reference<String>)->Void> = function:printprint<(reference<String>)->Void>{
Block:{
}:Void

}
[GLOBAL]/string_constructor:@string_constructor<(reference<CType1>, CType7)->reference<String>> = function:string_constructorstring_constructor<(reference<CType1>, CType7)->reference<String>>{
Block:{
}:reference<String>

}
[GLOBAL]/get_appended_string:@get_appended_string<(reference<String>, reference<String>)->reference<String>> = function:get_appended_stringget_appended_string<(reference<String>, reference<String>)->reference<String>>{
Block:{
}:reference<String>

}
[GLOBAL]/to_char_ptr:@to_char_ptr<(reference<String>)->reference<CType1>> = function:to_char_ptrto_char_ptr<(reference<String>)->reference<CType1>>{
Block:{
}:reference<CType1>

}
[GLOBAL]/append_string:@append_string<(reference<String>, reference<String>)->Void> = function:append_stringappend_string<(reference<String>, reference<String>)->Void>{
Block:{
}:Void

}
[GLOBAL]/int_to_str:@int_to_str<(CType7)->reference<String>> = function:int_to_strint_to_str<(CType7)->reference<String>>{
Block:{
}:reference<String>

}
[GLOBAL]/float_to_str:@float_to_str<(CType2)->reference<String>> = function:float_to_strfloat_to_str<(CType2)->reference<String>>{
Block:{
}:reference<String>

}
[GLOBAL]/to_real_number:@to_real_number<(CType7)->CType2> = function:to_real_numberto_real_number<(CType7)->CType2>{
Block:{
}:CType2

}
[GLOBAL]/to_integer:@to_integer<(CType2)->CType7> = function:to_integerto_integer<(CType2)->CType7>{
Block:{
}:CType7

}
[GLOBAL]/op_and:@op_and<(CType0, CType0)->CType0> = function:op_andop_and<(CType0, CType0)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_or:@op_or<(CType0, CType0)->CType0> = function:op_orop_or<(CType0, CType0)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_equal_string:@op_equal_string<(reference<String>, reference<String>)->CType0> = function:op_equal_stringop_equal_string<(reference<String>, reference<String>)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/add_int:@add_int<(CType7, CType7)->CType7> = function:add_intadd_int<(CType7, CType7)->CType7>{
Block:{
}:CType7

}
[GLOBAL]/sub_int:@sub_int<(CType7, CType7)->CType7> = function:sub_intsub_int<(CType7, CType7)->CType7>{
Block:{
}:CType7

}
[GLOBAL]/mul_int:@mul_int<(CType7, CType7)->CType7> = function:mul_intmul_int<(CType7, CType7)->CType7>{
Block:{
}:CType7

}
[GLOBAL]/op_greater_than_int:@op_greater_than_int<(CType7, CType7)->CType0> = function:op_greater_than_intop_greater_than_int<(CType7, CType7)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_greater_than_or_equal_int:@op_greater_than_or_equal_int<(CType7, CType7)->CType0> = function:op_greater_than_or_equal_intop_greater_than_or_equal_int<(CType7, CType7)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_less_than_int:@op_less_than_int<(CType7, CType7)->CType0> = function:op_less_than_intop_less_than_int<(CType7, CType7)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_less_than_or_equal_int:@op_less_than_or_equal_int<(CType7, CType7)->CType0> = function:op_less_than_or_equal_intop_less_than_or_equal_int<(CType7, CType7)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_equal_int:@op_equal_int<(CType7, CType7)->CType0> = function:op_equal_intop_equal_int<(CType7, CType7)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_not_equal_int:@op_not_equal_int<(CType7, CType7)->CType0> = function:op_not_equal_intop_not_equal_int<(CType7, CType7)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/add_double:@add_double<(CType2, CType2)->CType2> = function:add_doubleadd_double<(CType2, CType2)->CType2>{
Block:{
}:CType2

}
[GLOBAL]/sub_double:@sub_double<(CType2, CType2)->CType2> = function:sub_doublesub_double<(CType2, CType2)->CType2>{
Block:{
}:CType2

}
[GLOBAL]/mul_double:@mul_double<(CType2, CType2)->CType2> = function:mul_doublemul_double<(CType2, CType2)->CType2>{
Block:{
}:CType2

}
[GLOBAL]/div_double_double:@div_double_double<(CType2, CType2)->CType2> = function:div_double_doublediv_double_double<(CType2, CType2)->CType2>{
Block:{
}:CType2

}
[GLOBAL]/div_double_int:@div_double_int<(CType2, CType7)->CType2> = function:div_double_intdiv_double_int<(CType2, CType7)->CType2>{
Block:{
}:CType2

}
[GLOBAL]/div_int_double:@div_int_double<(CType7, CType2)->CType2> = function:div_int_doublediv_int_double<(CType7, CType2)->CType2>{
Block:{
}:CType2

}
[GLOBAL]/div_int_int:@div_int_int<(CType7, CType7)->CType2> = function:div_int_intdiv_int_int<(CType7, CType7)->CType2>{
Block:{
}:CType2

}
[GLOBAL]/op_greater_than_double:@op_greater_than_double<(CType2, CType2)->CType0> = function:op_greater_than_doubleop_greater_than_double<(CType2, CType2)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_greater_than_or_equal_double:@op_greater_than_or_equal_double<(CType2, CType2)->CType0> = function:op_greater_than_or_equal_doubleop_greater_than_or_equal_double<(CType2, CType2)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_less_than_double:@op_less_than_double<(CType2, CType2)->CType0> = function:op_less_than_doubleop_less_than_double<(CType2, CType2)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_less_than_or_equal_double:@op_less_than_or_equal_double<(CType2, CType2)->CType0> = function:op_less_than_or_equal_doubleop_less_than_or_equal_double<(CType2, CType2)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_equal_double:@op_equal_double<(CType2, CType2)->CType0> = function:op_equal_doubleop_equal_double<(CType2, CType2)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/op_not_equal_double:@op_not_equal_double<(CType2, CType2)->CType0> = function:op_not_equal_doubleop_not_equal_double<(CType2, CType2)->CType0>{
Block:{
}:CType0

}
[GLOBAL]/print:@print<(reference<String>)->Void>(
    ""
):Void
Block:{
  function:[GLOBAL]/Various#0[GLOBAL]/Various#0<(unsolved)->union @result_of_function_[GLOBAL]/Various#0{:Integer}>{
Block:{
}:union @result_of_function_[GLOBAL]/Various#0{:Integer}

}
}:unsolved


